---
- hosts: all
  gather_facts: False

  tasks:
    - name: set hostname to bastion-${vcd}-${cluster_id}
      ansible.builtin.hostname:
        name: bastion-${vcd}-${cluster_id}
        
    - name: update etc hosts file
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: '(\s+)vm-rhel8(\s+)'
        replace: '\1bastion-${vcd}-${cluster_id}\2'
        
    - name: add lb & registry to /etc/hosts
      blockinfile: 
         path: /etc/hosts
         block: | 
            ${network_lb_ip_address}  api.${cluster_id}.${base_domain}
            ${network_lb_ip_address}  api-int.${cluster_id}.${base_domain}
         %{if airgapped}
            ${mirror_ip}  ${mirror_fqdn} 
         %{endif}
            
         state: present
         marker_begin: "${cluster_id}"
         marker_end: "${cluster_id}"

    # register the VM
    #- name: Prepare RHEL host entitlement enablement
    #  shell: "rpm -ivh --replacepkgs http://52.117.132.7/pub/katello-ca-consumer-latest.noarch.rpm"
     # args:
     #   warn: no
    
    - name: Generate an uuidgen  
      shell: uuidgen
      register: uuid 

    - name: Set inputs by RHEL host entitlement enablement
      ansible.builtin.shell: echo '{"dmi.system.uuid":"{{uuid.stdout}}"}' > /etc/rhsm/facts/uuid_override.facts
    
    - name: enable RHEL host entitlement
      ansible.builtin.shell: subscription-manager register --org=customer --activationkey=${rhel_key} --force
      
    # Upgrade all packages
    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest
    
    # configure DNS server on the vm
    - name: install dnsmasq
      yum:
        name:
          - dnsmasq
        state: latest
    
    - name: update dnsmasq.conf
      blockinfile: 
         path: /etc/dnsmasq.conf
         block: | 
            no-dhcp-interface=ens192
            server=8.8.8.8
            server=8.8.4.4
            listen-address=127.0.0.1
            interface=ens192
            interface=lo

    - name: enable dns
      ansible.builtin.systemd:
        name: dnsmasq
        state: restarted
        enabled: yes
  # install install epel
    - name: install epel
      ansible.builtin.shell: "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
     # args:
     #   warn: no         

 # install additional tools
    - name: install tools
      yum:
        name:
          - git
          - unzip
          - tar
          - yum-utils
          - ansible
          - podman
          - docker
          - gcc
          - python3-pip
        state: latest

 # install install vcd-cli
    - name: install vcd-cli
      ansible.builtin.shell: pip3 install vcd-cli
 #     args:
 #       warn: no         


    # nginx as http server
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: ${nginx_repo_dir}/nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        mode: '0644'
   
    - name: install nginx
      yum:
        name: nginx
        state: latest
        
    #upload the nginx config
    - name: Nginx - config - Copy file with owner and permissions
      ansible.builtin.copy:
        src: ${nginx_repo_dir}/default.conf
        dest: /etc/nginx/conf.d/default.conf
        mode: '0644'
    #upload the nginx config
    - name: Nginx - config - Copy file with owner and permissions
      ansible.builtin.copy:
        src: ${nginx_repo_dir}/nginx.conf
        dest: /etc/nginx/nginx.conf
        mode: '0644'

  
    - name: enable ngix
      ansible.builtin.systemd:
        name: nginx
        state: restarted
        enabled: yes

 
 # terraform cli
    - name: add terraform repo 
      ansible.builtin.shell: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

    - name: install terraform
      yum:
        name:
          - terraform
    
    # openshift cli
    - name: get oc client archive
      get_url:
        url: "http://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-${openshift_version}/openshift-client-linux.tar.gz"
        dest: "/tmp" 

    - name: untar oc cli archive
      ansible.builtin.unarchive:
        src: "/tmp/openshift-client-linux.tar.gz"
        dest: "/usr/local/bin"
        remote_src: yes
    # start chronyd in case its off
    - name: start service
      ansible.builtin.systemd:
        state: started
        name: chronyd
        
    # configure firewall on VM
    - name: configure firewall
      shell: "firewall-cmd --add-port=80/tcp --zone=public --permanent"
    
    - name: configure firewall
      shell: "firewall-cmd --add-port=53/tcp --zone=public --permanent"

    - name: configure firewall
      shell: "firewall-cmd --add-port=53/udp --zone=public --permanent"

    - name: configure firewall
      shell: "firewall-cmd --add-port=5000-5010/tcp --zone=public --permanent"

    - name: configure firewall
      shell: "firewall-cmd --reload"
    
    # check out git repo with OCP terraform script
    - name: git checkout ${terraform_ocp_repo}
      git:
        repo: "${terraform_ocp_repo}"
        dest: /opt/terraform

     #upload the terraform.tfvars config
    - name: terraform.tfvars - copy 
      ansible.builtin.copy:
         src: ${terraform_root}/terraform.tfvars
         dest: /opt/terraform
         mode: '0644'
         
    - name: Create cluster ssh key directory
      ansible.builtin.file:
        path: /root/.ssh/${cluster_id}
        state: directory
        mode: '0600'
      
    - name: bastion ssh private key - copy 
      ansible.builtin.copy:
         src: ${key_directory}/${cluster_id}/id_bastion
         dest: /root/.ssh/${cluster_id}
         mode: '0600'         
  
      # Pull secret copy
    
    - name: copy pull secret if there
      block:
        - name: Pull Secret - Copy file 
          ansible.builtin.copy:
            src: ${openshift_pull_secret}
            dest: ${pull_secret_dest}/
            mode: '0644'
      rescue:
        - name: no secret error
          ansible.builtin.debug:
            msg: 'Pull secret ${openshift_pull_secret} not found' 
        - name: force error
          ansible.builtin.command: /bin/false            

    %{if additional_trust_bundle != ""}
    - name: copy additional trust bundle if defined
      block:
        - name: additional trust bundle - Copy file 
          ansible.builtin.copy:
            src: ${additional_trust_bundle}
            dest: ${additional_trust_bundle_dest}/
            mode: '0644'
      rescue:
        - name: trust bundle error message
          ansible.builtin.debug:
            msg: 'trust bundle ${additional_trust_bundle} not found '
        - name: force error
          ansible.builtin.command: /bin/false
    %{endif} 
    - name: Copy run cluster install exec
      ansible.builtin.copy:
        src: ${nginx_repo_dir}/run_cluster_install.sh
        dest: /root/run_cluster_install.sh
        mode: '0755'
    - name: Copy extend disk partition
      ansible.builtin.copy:
        src: ${nginx_repo_dir}/extend-disk.sh
        dest: /root/extend-disk.sh
        mode: '0755'   
    - name: run extend-disk block
      block:
        - name: run extend-disk
          shell: "/root/extend-disk.sh >> /root/extend-disk.log" 
        - name: retrieve extend-disk.log
          ansible.builtin.fetch:
            src: /root/extend-disk.log
            dest: ~/extend-disk.log
            flat: yes                              
      rescue:
        - name: extend disk failed
          ansible.builtin.debug:
            msg: 'extend disk failed. Check ~/extend-disk.log for details'   
      always:
        - name: retrieve cluster_install.log
          ansible.builtin.fetch:
            src: /root/extend-disk.log
            dest: ~/extend-disk.log
            flat: yes   

    %{if run_cluster_install}
    - name: run cluster install block
      block:
        - name: run cluster install
          shell: "/root/run_cluster_install.sh >> /root/cluster_install.log" 
        - name: retrieve cluster_install.log
          ansible.builtin.fetch:
            src: /root/${cluster_id}info.txt
            dest: ~/${cluster_id}info.txt
            flat: yes                              
      rescue:
        - name: cluster install failed
          ansible.builtin.debug:
            msg: 'Cluster Install failed. Check ~/cluster_install.log for details'   
      always:
        - name: retrieve cluster_install.log
          ansible.builtin.fetch:
            src: /root/cluster_install.log
            dest: ~/cluster_install.log
            flat: yes 

    %{endif}
             
